name: professionalize.com Deployment
run-name: >-
  Deploy ${{ inputs.site == 'www'
    && 'www.professionalize.com'
    || format('{0}.professionalize.com', inputs.site) }}
  to ${{ inputs.environment }} by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment"
        type: environment
        default: staging
        required: true
      site:
        description: "Which section to deploy"
        type: choice
        options: [www, agents, about]
        default: www
        required: true

jobs:
  deploy:
    environment: ${{ github.event.inputs.environment }}   # enables ${{ vars.* }}
    runs-on: ubuntu-latest

    env:
      SITE: ${{ github.event.inputs.site }}

    concurrency:
      group: deploy-${{ github.event.inputs.environment }}-${{ github.event.inputs.site }}
      cancel-in-progress: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: professionalize/professionalize
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          submodules: true

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: "0.135.0"
          extended: true

      # --- PostCSS toolchain (fixes your error) ---
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # Install PostCSS where package.json lives (root or theme).
      # Falls back to global install if no package.json is found.
      - name: Install PostCSS toolchain
        shell: bash
        run: |
          set -euo pipefail
          FOUND=0
          for d in "." themes/*; do
            if [ -f "$d/package.json" ]; then
              echo "Installing deps in $d"
              if [ -f "$d/package-lock.json" ]; then
                (cd "$d" && npm ci)
              else
                (cd "$d" && npm i)
              fi
              FOUND=1
            fi
          done
          if [ $FOUND -eq 0 ]; then
            echo "No package.json found; installing PostCSS CLI + Autoprefixer globally"
            npm i -g postcss postcss-cli autoprefixer
          fi
          # optional sanity
          npx postcss --version || true

      - name: Compute target (bucket, base URL, config) from $SITE
        id: target
        shell: bash
        run: |
          set -euo pipefail

          # Bucket derived directly from SITE
          BUCKET="${SITE}-professionalize-com"

          # Prod URL: https://<site>.professionalize.com
          PROD_URL="https://${SITE}.professionalize.com"

          # Staging URL pattern:
          #   www   -> https://qa.professionalize.com
          #   other -> https://qa-<site>.professionalize.com
          if [[ "$SITE" == "www" ]]; then
            STAGE_URL="https://qa.professionalize.com"
          else
            STAGE_URL="https://qa-${SITE}.professionalize.com"
          fi

          # Hugo config file per site
          CONFIG="configs/${SITE}.professionalize.com.toml"

          # Pick base URL by environment
          if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            BASE_URL="$PROD_URL"
          else
            BASE_URL="$STAGE_URL"
          fi

          echo "bucket=$BUCKET"     >> "$GITHUB_OUTPUT"
          echo "base_url=$BASE_URL" >> "$GITHUB_OUTPUT"
          echo "config=$CONFIG"     >> "$GITHUB_OUTPUT"

      - name: Build site
        env:
          # Tell Hugo to invoke PostCSS via npx (works whether local or global)
          HUGO_POSTCSS_EXECUTABLE: npx
        run: >
          hugo
          --config "${{ steps.target.outputs.config }},configs/common.professionalize.com.toml"
          -b "${{ steps.target.outputs.base_url }}"
          --cleanDestinationDir --minify
          --templateMetrics --templateMetricsHints --enableGitInfo

      # --- S3 sync 
      - name: Sync Website to Ceph S3
        working-directory: public
        env:
          AWS_ENDPOINT_URL:       ${{ vars.AWS_ENDPOINT_URL }}
          AWS_DEFAULT_REGION:     ${{ vars.AWS_DEFAULT_REGION }}
          AWS_REGION:             ${{ vars.AWS_DEFAULT_REGION }}
          AWS_S3_FORCE_PATH_STYLE: "true"  # helpful for Ceph; harmless on AWS
          AWS_ACCESS_KEY_ID:      ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 sync . "s3://${{ steps.target.outputs.bucket }}" 

      # --- Final: Purge Bunny CDN cache for the deployed site ---
      - name: Purge Bunny CDN cache
        if: success()
        env:
          BUNNY_API_KEY: ${{ secrets.BUNNY_API_KEY }}
          BASE_URL:      ${{ steps.target.outputs.base_url }}
        shell: bash
        run: |
          set -euo pipefail
          TARGET="${BASE_URL%/}/*"
          echo "Purging Bunny CDN for: $TARGET"
          curl -sS -G \
            -H "X-Api-Key: ${BUNNY_API_KEY}" \
            --data-urlencode "url=${TARGET}" \
            "https://api.dynabic.com/bn/purge?async=true" \
            -D - | sed -n '1,60p'
